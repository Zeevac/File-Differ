package com.development.mapkit;

import android.content.Context;
import android.graphics.Point;
import android.support.annotation.Nullable;

import com.development.mapkit.components.CircleCapsule;
import com.development.mapkit.components.GroundOverlayCapsule;
import com.development.mapkit.components.MapComponent;
import com.development.mapkit.components.MapComponentType;
import com.development.mapkit.components.MarkerCapsule;
import com.development.mapkit.components.PolygonCapsule;
import com.development.mapkit.components.PolylineCapsule;
import com.development.mapkit.components.TileOverlayCapsule;
import com.development.mapkit.listeners.MapListener;
import com.development.mapkit.utils.json.JsonToObject;
import com.development.mapkit.utils.json.ObjectToJson;
import com.huawei.hms.maps.HuaweiMap;
import com.huawei.hms.maps.TextureMapView;
import com.huawei.hms.maps.model.LatLng;

import org.json.JSONException;
import org.json.JSONObject;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;


public final class MapCapsule {

    public static final String TAG = MapCapsule.class.getSimpleName();
    private static int id = 0;
    private int capsuleId;
    private TextureMapView textureMapView;
    private HuaweiMap huaweiMap;
    private Map<Integer, MapComponent> componentMap;

    private final UiSettingsSetter uiSettingsSetter = new UiSettingsSetter();
    private final HuaweiMapSetter huaweiMapSetter = new HuaweiMapSetter();
    private final HuaweiMapGetter huaweiMapGetter = new HuaweiMapGetter();
    private MapListener mapListener;

    public MapCapsule(Context mContext, MapListener mapListener, @Nullable JSONObject mapOptions) {
        capsuleId = ++id;
        componentMap = new HashMap<>();
        this.mapListener = mapListener;
        textureMapView = new TextureMapView(mContext, JsonToObject.getInstance().constructMapOptions(mapOptions));
        textureMapView.onCreate(null);
    }

    public JSONObject setMapListener(String eventName) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
        mapListener.bindListener(this.huaweiMap, eventName, this.capsuleId);
        return null;
    }

    public MapComponent addComponent(MapComponentType type, JSONObject json) {

        MapComponent mapComponent = null;
        try {
            if (type == MapComponentType.MARKER)
                mapComponent = new MarkerCapsule(huaweiMap, JsonToObject.getInstance().constructMarkerOptions(json));
            else if (type == MapComponentType.CIRCLE)
                mapComponent = new CircleCapsule(huaweiMap, JsonToObject.getInstance().constructCircleOptions(json));
            else if (type == MapComponentType.GROUND_OVERLAY)
                mapComponent = new GroundOverlayCapsule(huaweiMap, JsonToObject.getInstance().constructGroundOverlayOptions(json));
            else if (type == MapComponentType.POLYGON)
                mapComponent = new PolygonCapsule(huaweiMap, JsonToObject.getInstance().constructPolygonOptions(json));
            else if (type == MapComponentType.POLYLINE)
                mapComponent = new PolylineCapsule(huaweiMap, JsonToObject.getInstance().constructPolylineOptions(json));
            else if (type == MapComponentType.TILE_OVERLAY)
                mapComponent = new TileOverlayCapsule(huaweiMap, JsonToObject.getInstance().constructTileOverlayOptions(json));
        } catch (JSONException e) {
            e.printStackTrace();
        }
        componentMap.put(mapComponent.getObjectId(), mapComponent);
        return mapComponent;
    }

    public boolean removeComponent(int componentId) {
        if (!componentMap.containsKey(componentId)) return false;
        componentMap.get(componentId).remove();
        componentMap.remove(componentId);
        return true;
    }

    public JSONObject moveCamera(String eventName, JSONObject json) throws JSONException {
        huaweiMap.moveCamera(JsonToObject.getInstance().constructCameraUpdate(eventName, json));
        return null;
    }

    public JSONObject animateCamera(String eventName, JSONObject json) throws JSONException {
        huaweiMap.animateCamera(JsonToObject.getInstance().constructCameraUpdate(eventName, json));
        return null;
    }


    public JSONObject setMapOptions(String optionType, String methodName, JSONObject args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, JSONException {
        if (optionType.equals("setUiSettings")) return setMapUiSettings(methodName, args);
        else if (optionType.equals("setHuaweiMapOptions")) return setMapSettings(methodName, args);
        else if (optionType.equals("getHuaweiMapOptions")) return getMapSettings(methodName);
        else if (optionType.equals("moveCamera")) return moveCamera(methodName, args);
        else if (optionType.equals("animateCamera")) return animateCamera(methodName, args);
        else if (optionType.equals("setListener")) return setMapListener(methodName);
        return null;
    }

    private JSONObject getMapSettings(String methodName) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
        return huaweiMapGetter.run(methodName);
    }

    public JSONObject setMapUiSettings(String methodName, JSONObject args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        return uiSettingsSetter.run(methodName, args);
    }

    public JSONObject setMapSettings(String methodName, JSONObject json) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        return huaweiMapSetter.run(methodName, json);
    }

    public MapComponent getComponent(int id) {
        if (componentMap.containsKey(id)) {
            return componentMap.get(id);
        }
        return null;
    }

    public TextureMapView getTextureMapView() {
        return textureMapView;
    }

    public void setHuaweiMap(HuaweiMap map) {
        this.huaweiMap = map;
    }

    public void projectionStuff() {
        huaweiMap.getProjection().fromScreenLocation(new Point(1, 2));
        huaweiMap.getProjection().toScreenLocation(new LatLng(1, 2));
        huaweiMap.getProjection().getVisibleRegion();
    }

    public void focusedBuilding() {
        huaweiMap.getFocusedBuilding().getActiveLevelIndex();
        huaweiMap.getFocusedBuilding().getDefaultLevelIndex();
        huaweiMap.getFocusedBuilding().isUnderground();
        huaweiMap.getFocusedBuilding().getLevels();
    }


    public JSONObject toJson() {
        try {

            return new JSONObject()
                    .put("id", capsuleId)
                    .put("cameraPosition", ObjectToJson.getInstance().constructJsonFromCameraPosition(huaweiMap.getCameraPosition()))
                    .put("uiSettings", ObjectToJson.getInstance().constructJsonFromHuaweiMapUiSettings(huaweiMap.getUiSettings()))
                    .put("mapType", huaweiMap.getMapType())
                    .put("maxZoomLevel", huaweiMap.getMaxZoomLevel())
                    .put("minZoomLevel", huaweiMap.getMinZoomLevel())
                    .put("projection", huaweiMap.getProjection()) // change this
                    .put("indoorBuilding", huaweiMap.getFocusedBuilding()) // change this
                    .put("buildingsEnabled", huaweiMap.isBuildingsEnabled())
                    .put("indoorEnabled", huaweiMap.isIndoorEnabled())
                    .put("myLocationEnabled", huaweiMap.isMyLocationEnabled())
                    .put("trafficEnabled", huaweiMap.isTrafficEnabled());
        } catch (JSONException e) {
            e.printStackTrace();
            return null;
        }
    }


    ////////////////////////////////////////////// UI SETTINGS CAPSULE ////////////////////////////////////////////////////////////
    ////////////////////////////////////////////// UI SETTINGS CAPSULE /////////////////////////////////////////////////////////////

    private class UiSettingsSetter {

        JSONObject setZoomGesturesEnabled(JSONObject val) throws JSONException {
            huaweiMap.getUiSettings().setZoomGesturesEnabled(val.optBoolean("zoomGesturesEnabled"));
            return new JSONObject().put("zoomGesturesEnabled", huaweiMap.getUiSettings().isZoomGesturesEnabled());
        }

        JSONObject setTiltGesturesEnabled(JSONObject val) throws JSONException {
            huaweiMap.getUiSettings().setTiltGesturesEnabled(val.optBoolean("tiltGesturesEnabled"));
            return new JSONObject().put("tiltGesturesEnabled", huaweiMap.getUiSettings().isTiltGesturesEnabled());
        }

        JSONObject setZoomControlsEnabled(JSONObject val) throws JSONException {
            huaweiMap.getUiSettings().setZoomControlsEnabled(val.optBoolean("zoomControlsEnabled"));
            return new JSONObject().put("zoomControlsEnabled", huaweiMap.getUiSettings().isZoomControlsEnabled());
        }

        JSONObject setScrollGesturesEnabledDuringRotateOrZoom(JSONObject val) throws JSONException {
            huaweiMap.getUiSettings().setScrollGesturesEnabledDuringRotateOrZoom(val.optBoolean("scrollGesturesEnabledDuringRotateOrZoom"));
            return new JSONObject().put("scrollGesturesEnabledDuringRotateOrZoom", huaweiMap.getUiSettings().isScrollGesturesEnabledDuringRotateOrZoom());
        }

        JSONObject setScrollGesturesEnabled(JSONObject val) throws JSONException {
            huaweiMap.getUiSettings().setScrollGesturesEnabled(val.optBoolean("scrollGesturesEnabled"));
            return new JSONObject().put("scrollGesturesEnabled", huaweiMap.getUiSettings().isScrollGesturesEnabled());
        }

        JSONObject setRotateGesturesEnabled(JSONObject val) throws JSONException {
            huaweiMap.getUiSettings().setRotateGesturesEnabled(val.optBoolean("rotateGesturesEnabled"));
            return new JSONObject().put("rotateGesturesEnabled", huaweiMap.getUiSettings().isRotateGesturesEnabled());
        }

        JSONObject setMyLocationButtonEnabled(JSONObject val) throws JSONException {
            huaweiMap.getUiSettings().setMyLocationButtonEnabled(val.optBoolean("myLocationButtonEnabled"));
            return new JSONObject().put("myLocationButtonEnabled", huaweiMap.getUiSettings().isMyLocationButtonEnabled());
        }

        JSONObject setAllGesturesEnabled(JSONObject val) throws JSONException {
            huaweiMap.getUiSettings().setAllGesturesEnabled(val.optBoolean("allGesturesEnabled"));
            return new JSONObject().put("rotateGesturesEnabled", huaweiMap.getUiSettings().isRotateGesturesEnabled())
                    .put("scrollGesturesEnabled", huaweiMap.getUiSettings().isScrollGesturesEnabled())
                    .put("zoomGesturesEnabled", huaweiMap.getUiSettings().isZoomGesturesEnabled())
                    .put("tiltGesturesEnabled", huaweiMap.getUiSettings().isTiltGesturesEnabled())
                    .put("scrollGesturesEnabledDuringRotateOrZoom", huaweiMap.getUiSettings().isScrollGesturesEnabledDuringRotateOrZoom());
        }

        JSONObject setCompassEnabled(JSONObject val) throws JSONException {
            huaweiMap.getUiSettings().setCompassEnabled(val.optBoolean("compassEnabled"));
            return new JSONObject().put("compassEnabled", huaweiMap.getUiSettings().isCompassEnabled());
        }

        JSONObject setIndoorLevelPickerEnabled(JSONObject val) throws JSONException {
            huaweiMap.getUiSettings().setIndoorLevelPickerEnabled(val.optBoolean("indoorLevelPickerEnabled"));
            return new JSONObject().put("indoorLevelPickerEnabled", huaweiMap.getUiSettings().isIndoorLevelPickerEnabled());
        }

        JSONObject setMapToolbarEnabled(JSONObject val) throws JSONException {
            huaweiMap.getUiSettings().setMapToolbarEnabled(val.optBoolean("mapToolbarEnabled"));
            return new JSONObject().put("mapToolbarEnabled", huaweiMap.getUiSettings().isMapToolbarEnabled());
        }

        JSONObject run(String methodName, JSONObject args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
            Method m = this.getClass().getDeclaredMethod(methodName, JSONObject.class);
            return (JSONObject) m.invoke(this, args);
        }

    }

    ////////////////////////////////////////////////////////////HUAWEI MAP SETTERS CAPSULE///////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////HUAWEI MAP SETTERS CAPSULE/////////////////////////////////////////////////

    private class HuaweiMapSetter {

        /* *
        huaweiMap.setMarkersClustering(false);

        huaweiMap.setContentDescription("conte");
        huaweiMap.setLocationSource(null);
        * */
        JSONObject setPadding(JSONObject json) throws JSONException {
            huaweiMap.setPadding(json.getInt("left"), json.getInt("top"), json.getInt("right"), json.getInt("bottom"));
            return null;
        }

        JSONObject setTrafficEnabled(JSONObject json) throws JSONException {
            huaweiMap.setTrafficEnabled(json.optBoolean("trafficEnabled"));
            return new JSONObject().put("trafficEnabled", huaweiMap.isTrafficEnabled());
        }

        JSONObject resetMinMaxZoomPreference(JSONObject json) throws JSONException {
            huaweiMap.resetMinMaxZoomPreference();
            return new JSONObject().put("minZoomPreference", huaweiMap.getMinZoomLevel()).put("maxZoomPreference", huaweiMap.getMaxZoomLevel());
        }

        JSONObject setGeoPoliticalView(JSONObject json) {
            return null;
        }

        JSONObject setWatermarkEnabled(JSONObject json) {
            huaweiMap.setWatermarkEnabled(json.optBoolean("watermarkEnabled"));
            return null;
        }

        JSONObject setMinZoomPreference(JSONObject json) throws JSONException {
            huaweiMap.setMinZoomPreference((float) json.getDouble("minZoomPreference"));
            return new JSONObject().put("minZoomPreference", huaweiMap.getMinZoomLevel());
        }

        JSONObject setMaxZoomPreference(JSONObject json) throws JSONException {
            huaweiMap.setMaxZoomPreference((float) json.getDouble("maxZoomPreference"));
            return new JSONObject().put("maxZoomPreference", huaweiMap.getMaxZoomLevel());
        }

        JSONObject setMapType(JSONObject json) throws JSONException {
            huaweiMap.setMapType(json.getInt("mapType"));
            return new JSONObject().put("mapType", huaweiMap.getMapType());
        }

        JSONObject setMapStyle(JSONObject json) {
            return null;
        }

        JSONObject setLatLngBoundsForCameraTarget(JSONObject json) {
            return null;
        }

        JSONObject setLanguage(JSONObject json) throws JSONException {
            huaweiMap.setLanguage(json.getString("language"));
            return null;
        }

        JSONObject setInfoWindowAdapter(JSONObject json) {
            /* DUNNO
            huaweiMap.setInfoWindowAdapter(new HuaweiMap.InfoWindowAdapter() {
                @Override
                public View getInfoContents(Marker marker) {
                    return null;
                }

                @Override
                public View getInfoWindow(Marker marker) {
                    return null;
                }
            });
             */
            return null;
        }

        JSONObject setIndoorEnabled(JSONObject json) throws JSONException {
            huaweiMap.setIndoorEnabled(json.optBoolean("indoorEnabled"));
            return new JSONObject().put("indoorEnabled", huaweiMap.isIndoorEnabled());
        }

        JSONObject setContentDescription(JSONObject json) {
            huaweiMap.setContentDescription(json.optString("contentDescription"));
            return null;
        }

        JSONObject setMyLocationEnabled(JSONObject json) throws JSONException {
            huaweiMap.setMyLocationEnabled(json.optBoolean("myLocationEnabled"));
            return new JSONObject().put("myLocationEnabled", huaweiMap.isMyLocationEnabled());
        }

        JSONObject run(String methodName, JSONObject object) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
            Method m = this.getClass().getDeclaredMethod(methodName, JSONObject.class);
            return (JSONObject) m.invoke(this, object);
        }
    }

    // ///////////////////////////////////////////////////////////////
    // ////////////////// HUAWEI MAP GETTERS CAPSULE ////////////////////////

    private class HuaweiMapGetter {

        public JSONObject getCameraPosition() throws JSONException {
            return ObjectToJson.getInstance().constructJsonFromCameraPosition(huaweiMap.getCameraPosition());
        }


        JSONObject run(String methodName) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
            Method m = this.getClass().getDeclaredMethod(methodName);
            return (JSONObject) m.invoke(this);
        }
    }
}
